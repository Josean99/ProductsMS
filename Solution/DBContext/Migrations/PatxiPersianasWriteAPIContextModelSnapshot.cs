// <auto-generated />
using System;
using DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DBContext.Migrations
{
    [DbContext(typeof(ProductsAPIContext))]
    partial class PatxiPersianasWriteAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityService.Model.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdImage")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("EntityService.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdFatherCategory")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFatherCategory");

                    b.HasIndex("IdImage")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityService.Model.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlternativeText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EntityService.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdBrand")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCategory")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdBrand");

                    b.HasIndex("IdCategory");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityService.Model.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdProduct");

                    b.ToTable("ProductsImages");
                });

            modelBuilder.Entity("EntityService.Model.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("EntityService.Model.Brand", b =>
                {
                    b.HasOne("EntityService.Model.Image", "Image")
                        .WithOne("Brand")
                        .HasForeignKey("EntityService.Model.Brand", "IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EntityService.Model.Category", b =>
                {
                    b.HasOne("EntityService.Model.Category", "FatherCategory")
                        .WithMany("SonCategories")
                        .HasForeignKey("IdFatherCategory");

                    b.HasOne("EntityService.Model.Image", "Image")
                        .WithOne("Category")
                        .HasForeignKey("EntityService.Model.Category", "IdImage");

                    b.Navigation("FatherCategory");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EntityService.Model.Product", b =>
                {
                    b.HasOne("EntityService.Model.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("IdBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityService.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntityService.Model.ProductImage", b =>
                {
                    b.HasOne("EntityService.Model.Image", "Image")
                        .WithMany("ProductImages")
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityService.Model.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityService.Model.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EntityService.Model.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SonCategories");
                });

            modelBuilder.Entity("EntityService.Model.Image", b =>
                {
                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("EntityService.Model.Product", b =>
                {
                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
